{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["trimmer","stopWordFilter"]},"docs":[{"location":"install-maas/","title":"MAAS Installation","text":""},{"location":"install-maas/#about-maas","title":"About MAAS","text":"<p>Hujan using MAAS to deploy Operating System to your environment. MAAS (Metal as a Service) is an open-source tool that lets you build a data centre from bare-metal servers.  </p> <p>You can discover, commission, deploy, and dynamically reconfigure a large network of individual units. MAAS converts your hardware investment into a cohesive, flexible, distributed data centre, with a minimum of time and effort.</p>"},{"location":"install-maas/#requirements","title":"Requirements","text":"<p>The entire environment will consist of a single MAAS system. This MAAS cluster will contain a single zone, with the MAAS system (region and rack controllers).  </p> <p>Here are the minumum hardware requirements : - CPU : 4 Core.   - Memory : 4 GiB.  - Disk : 50 GiB. - 1 NIC.  </p> <p>See MAAS requirements in the MAAS documentation for more detailed information on what a MAAS system may require.  </p>"},{"location":"install-maas/#setup-maas","title":"Setup MAAS","text":"<p>Here is a concise summary of how to install and initialise MAAS.  </p> <ul> <li>Install MAAS and Testdb for MAAS</li> </ul> <pre><code>sudo snap install maas --channel=2.9/stable\nsudo snap install maas-test-db\n</code></pre> <ul> <li>First MAAS initialisation</li> </ul> <pre><code>sudo maas init region+rack --maas-url http://[maas-url]:5240/MAAS --database-uri maas-test-db:///\n</code></pre> <ul> <li>Create MAAS admin user</li> </ul> <pre><code>sudo maas createadmin --username admin --password s3cr3tp455w0rd --email admin@admin.id --ssh-import gh:[username]\n</code></pre> <ul> <li>Get API Key</li> </ul> <pre><code>sudo maas apikey --username admin &gt; ~/admin-api-key\n</code></pre> <p>For production you need to setup PostgreSQL.   </p> <p>Source : MAAS Documentation</p>"},{"location":"install/","title":"Hujan.io","text":""},{"location":"install/#server-installation-and-configuration","title":"Server Installation And Configuration","text":""},{"location":"install/#pre-installation","title":"Pre-Installation","text":"<p>You need to install the following dependencies :</p> <ul> <li>python3.6</li> <li>Nginx</li> <li>virtualenv</li> </ul>"},{"location":"install/#application-setup","title":"Application Setup","text":"<p>Clone the latest source code from the repository, and I assume you put it to <code>/var/www/html/</code></p> <pre><code>$ cd /var/www/html/\n$ git clone {repository}\n$ cd hujan_ui\n</code></pre>"},{"location":"install/#with-virtuan-environment","title":"With Virtuan Environment","text":"<p>Create virtualenv with python3</p> <pre><code>$ virtualenv --python=python3.6\n$ source/env/bin/activate\n$ pip install -r requirements.txt\n$ pip install gunicorn\n</code></pre>"},{"location":"install/#without-virtual-environment","title":"Without Virtual Environment","text":"<pre><code>$ pip3.6 install -r requirements.txt\n$ pip3.6 install gunicorn\n</code></pre> <p>Then create a configuration file, just copy from sample file and modify as your preference</p> <pre><code>$ cp hujan_ui/local_settings.sample.py hujan_ui/local_settings.py\n</code></pre> <p>Then run the database migration</p> <pre><code>$ python manage.py migrate\n</code></pre> <p>Then create first superuser</p> <pre><code>$ python manage.py createsuperuser\nUsername (leave blank to use 'root'):\nEmail address:\nPassword:\nPassword (again):\nSuperuser created successfully.\n</code></pre> <p>Then generate static files</p> <pre><code>$ python manage.py collectstatic\n</code></pre> <p>Create logs directory</p> <pre><code>$ mkdir logs\n</code></pre> <p>Runing the service</p> <pre><code>python manage.py runserver 8001\n</code></pre> <p>Then open your browser <code>http://[hujan-ip]:8001</code> and viola your web apps is already running !</p>"},{"location":"install/#run-hujan-ui-as-systemd-service","title":"Run Hujan UI as Systemd Service","text":"<p>To run <code>Hujan UI</code> as Systemd, simply you can follow this instruction.  </p> <ul> <li>Create <code>hujan_ui.service</code> file</li> </ul> <pre><code># touch /etc/systemd/system/hujan_ui.service\n</code></pre> <ul> <li>Add the following entry.</li> </ul> <pre><code>[Unit]\nDescription=hujan ui daemon\nAfter=network.target\n\n[Service]\nUser=root\nGroup=root\nWorkingDirectory=/var/www/html/hujan-ui/\n## Without virtualenv\nExecStart=/usr/local/bin/gunicorn hujan_ui.wsgi --bind 127.0.0.1:8001 --log-level=debug --log-file=logs/gunicorn.log\n\n## With virtualenv\nExecStart=/var/www/html/hujan_ui/env/bin/gunicorn hujan_ui.wsgi --bind 127.0.0.1:8001 --log-level=debug --log-file=logs/gunicorn.log\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <ul> <li>Reload daemon and start the service.</li> </ul> <pre><code># systemctl daemon-reload\n# systemctl start hujan_ui.service\n</code></pre>"},{"location":"installer/","title":"Installer Menu","text":"<p>The\u00a0installer\u00a0menu\u00a0is\u00a0used\u00a0to\u00a0start\u00a0deployment. On\u00a0this\u00a0menu\u00a0you\u00a0can\u00a0select\u00a0which\u00a0machine\u00a0will\u00a0use\u00a0for\u00a0controller\u00a0node, compute\u00a0node\u00a0and\u00a0more.</p> <p>To\u00a0start\u00a0deployment\u00a0go\u00a0to\u00a0Installer\u00a0menu.</p> <p></p> <p>From\u00a0this\u00a0page,\u00a0you\u00a0can\u00a0select\u00a0which\u00a0machine\u00a0to\u00a0deploy.\u00a0From\u00a0this\u00a0entry\u00a0<code>Hujan</code>\u00a0will\u00a0automaticaly\u00a0create\u00a0inventory\u00a0list.</p> <p></p> <p>After\u00a0that\u00a0select\u00a0save\u00a0server\u00a0and\u00a0next\u00a0to\u00a0inventory\u00a0page.\u00a0On\u00a0this\u00a0page\u00a0you\u00a0can\u00a0select\u00a0the\u00a0server\u00a0role,\u00a0which\u00a0will\u00a0be\u00a0added\u00a0to\u00a0<code>kolla-ansible</code>\u00a0inventory.</p> <p></p> <p>Click\u00a0on\u00a0<code>Add\u00a0Inventory</code>.</p> <p></p> <p>Click\u00a0<code>Save\u00a0Inventory</code>\u00a0and\u00a0next\u00a0to\u00a0<code>Globals\u00a0Configuration</code>\u00a0menu.</p> <p></p> <p>On\u00a0<code>Global\u00a0Configuration</code>\u00a0menu\u00a0you\u00a0can\u00a0customize your openstack configuration base on globals.yml from <code>kolla-ansible</code>. Then click <code>deploy</code>.</p> <p></p> <p></p>"},{"location":"machine/","title":"Manage Machine","text":"<p>Hujan provide some MAAS functionalities, such as add machine, deploy and delete.</p>"},{"location":"machine/#add-machine","title":"Add Machine","text":"<p>To Add machine navigate to <code>Machines</code> then select <code>Add Machine</code>. </p> <p></p> <p>For now, <code>Hujan</code> just support <code>IPMI</code> for the power type.</p> <p></p> <p>if you use <code>KVM</code> or you want to deploy your openstack in lab environment, you can use <code>vbmc</code> to emulate <code>BMC</code> functionalaties.</p> <p>Fill the machine detail, then select save machine. And your machine is ready to be deploy.</p> <p></p>"},{"location":"prerequisite/","title":"Pre-requisite","text":"<p>This guide provides step by step instructions to deploy hujan io</p>"},{"location":"prerequisite/#system-requirements","title":"System Requirements","text":"<p>The system machine must satisfy the following requirements : - 1 network interface - 4 Core of CPU - 4 GiB of RAM - 50 GiB of disk space - Python 3.6.1 installed - Kolla Ansible v9.3.1 installed - MAAS v2.8.2 installed  </p> <p>Hujan using MAAS (Metal as a Service) to manage barematal, and Kolla-ansible as the basis of deployment tools.</p>"},{"location":"prerequisite/#install-kolla-ansible","title":"Install Kolla ansible","text":""},{"location":"prerequisite/#install-dependencies","title":"Install Dependencies","text":"<ul> <li>Update the package index.  </li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Install python build dependencies.  </li> </ul> <pre><code>sudo apt install python3-dev libffi-dev gcc libssl-dev\n</code></pre> <ul> <li>Install pip.  </li> </ul> <pre><code>sudo apt install python3-pip\n</code></pre> <ul> <li>Ensure the latest version of pip installed.  </li> </ul> <pre><code>sudo pip3 install -U pip\n</code></pre> <ul> <li>Install Ansible. Kolla ansible requires at least Ansible 2.9 and support up to ansible 2.9.  </li> </ul> <pre><code>sudo apt install ansible\n</code></pre> <p>If the installed ansible version not meet requirement you can use pip. </p> <pre><code>sudo pip3 install -U 'ansible&lt;2.10'\n</code></pre> <ul> <li>Install Kolla Ansible.  </li> </ul> <pre><code>sudo pip3 install kolla-ansible==9.3.1\n</code></pre> <ul> <li>Create the <code>/etc/kolla</code> directory.</li> </ul> <pre><code>sudo mkdir -p /etc/kolla\nsudo chown $USER:$USER /etc/kolla\n</code></pre> <ul> <li>Copy <code>globals.yaml</code> and <code>password.yaml</code> to <code>/etc/kolla/</code>.  </li> </ul> <pre><code>cp -r /usr/local/share/kolla-ansible/etc_examples/kolla/* /etc/kolla\n</code></pre> <ul> <li>Create <code>kolla</code> user</li> </ul> <pre><code>sudo useradd kolla\n</code></pre>"}]}